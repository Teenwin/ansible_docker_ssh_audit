---
- name: Получить имя хоста
  ansible.builtin.command: hostname --fqdn
  register: hostname_result
  changed_when: false

- name: Получить текущую версию Ansible
  set_fact:
    ansible_version: "{{ ansible_version.full }}"

- name: Получить имя пользователя, запустившего Ansible
  set_fact:
    ansible_user: "{{ ansible_user_id }}"

- name: Извлечь параметры из sshd_config
  ansible.builtin.lineinfile:
    path: "{{ sshd_config_path }}"
    regexp: '^{{ item }}\s+.*$'
    line: ""  # не меняем файл
    backup: no
  loop: "{{ ssh_audit_expected_config.keys() }}"
  check_mode: yes
  register: ssh_config_lines
  changed_when: false

- name: Парсинг значений из найденных строк
  set_fact:
    ssh_config_parsed: >-
      {{
        dict(
          ssh_config_lines.results
          | selectattr('matched', 'defined')
          | selectattr('matched', 'equalto', 1)
          | map(attribute='line')
          | map('split', ' ')
          | map('first2', 'rest')
          | map('zip')
          | map('map', 'string')
          | map('join', '=')
          | map('split', '=')
          | list
        )
      }}
  vars:
    first2: >-
      {{ 
        [item[0], item[1:]] 
      }}

- name: Формирование результатов проверки
  set_fact:
    audit_result: |
      {
        "timestamp": "{{ ansible_date_time.iso8601 }}",
        "host": "{{ hostname_result.stdout }}",
        "ansible_version": "{{ ansible_version }}",
        "ansible_user": "{{ ansible_user }}",
        "message": {{ 
          (ssh_audit_expected_config | dict2items | map(attribute='key') | sort) ==
          (ssh_config_parsed | dict2items | map(attribute='key') | sort) and
          (ssh_config_parsed | combine(ssh_audit_expected_config, recursive=True) == ssh_config_parsed)
          | ternary('{"status": "compliant"}', 
                    {
                      "status": "non-compliant",
                      "PermitRootLogin": ssh_config_parsed.get("PermitRootLogin", "not_found"),
                      "PasswordAuthentication": ssh_config_parsed.get("PasswordAuthentication", "not_found"),
                      "MaxAuthTries": ssh_config_parsed.get("MaxAuthTries", "not_found"),
                      "ChallengeResponseAuthentication": ssh_config_parsed.get("ChallengeResponseAuthentication", "not_found"),
                      "X11Forwarding": ssh_config_parsed.get("X11Forwarding", "not_found")
                    })
        }}
      }

- name: Запись результата в лог-файл
  ansible.builtin.copy:
    content: "{{ audit_result }}"
    dest: "{{ ssh_audit_log_file }}"
    owner: root
    group: root
    mode: '0644'
  notify: Ensure log directory exists
